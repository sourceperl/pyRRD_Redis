#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import csv
import sys
from datetime import datetime
import os
import matplotlib
# fix backend for no-X environments (must be before pyplot import)
if os.environ.get('DISPLAY', '') == '':
    matplotlib.use('Agg')
import matplotlib.pyplot as plt

# parse args
parser = argparse.ArgumentParser()
parser.add_argument('csv_file', type=str, nargs='+', help='CSV file')
parser.add_argument('-u', '--unit', type=str, help='unit like \'wh/nm3\'')
parser.add_argument('-t', '--top', type=float, help='max value of Y axe', default=None)
parser.add_argument('-b', '--bottom', type=float, help='min value of Y axe', default=None)
parser.add_argument('-i', '--img', type=str, help='export as image file')
args = parser.parse_args()

# parse all CSV files
d = {}
for f_name in args.csv_file:
    with open(f_name) as file:
        for row in csv.reader(file, delimiter=';'):
            if len(row) >= 2:
                d[row[0]] = row[1]

# format data for plot
value, time = [], []
for k in sorted(d):
    try:
        value.append(float(d[k]))
        time.append(datetime.strptime(k, '%Y-%m-%d %H:%M:%S'))
    except ValueError:
        sys.exit('CSV file format error')

# plot
plt.plot(time, value)
plt.gcf().autofmt_xdate()
# set unit
if args.unit:
    plt.ylabel(args.unit)
# set Y limit(s)
if args.top is not None:
    plt.ylim(top=args.top)
if args.bottom is not None:
    plt.ylim(bottom=args.bottom)
# export as image or show plot
if args.img:
    plt.savefig(args.img, dpi=100)
else:
    plt.show()
